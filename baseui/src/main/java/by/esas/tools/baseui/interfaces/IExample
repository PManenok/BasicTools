/*
 * Copyright 2021 Electronic Systems And Services Ltd.
 * SPDX-License-Identifier: Apache-2.0
 */




import by.hgrosh.notary.utils.operators.IAccessContainer

interface IContainVM {
    fun provideAccessContainer(): IAccessContainer?
}

interface IExecutingVM {
    var useCases: MutableList<UseCase<*>>

    fun provideUseCases(): List<UseCase<*>> {
        return emptyList()
    }

    fun addUseCases() {
        unsubscribeUseCases()
        useCases.clear()
        useCases.addAll(provideUseCases())
    }
    fun unsubscribeUseCases() {
        useCases.forEach { it.unsubscribe() }
    }
}

import io.github.anderscheow.validator.Validation

interface IValidateVM {
    val validationsList: MutableList<Validation>

    fun addValidation(validation: Validation) {
        validationsList.add(validation)
    }

    fun clearValidations(){
        validationsList.clear()
    }
}


import androidx.lifecycle.MutableLiveData
import androidx.navigation.NavDirections
interface INavigateVM {
    val navDirection: MutableLiveData<NavDirections?>
    val popBack: MutableLiveData<Pair<Int, Boolean>?>

    fun navigate(direction: NavDirections) {
        navDirection.postValue(direction)
    }

    fun popBack() {
        popBack.value = Pair(0, false)
    }

    fun popBack(destination: Int = 0, inclusive: Boolean = false) {
        popBack.value = Pair(destination, inclusive)
    }
}